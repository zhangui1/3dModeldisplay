# 3D模型展示平台 - Nginx 配置文件
# 支持 OBJ, PLY, STL 格式的渐进式加载

server {
    listen 80;
    server_name your-domain.com;  # 修改为你的域名或服务器IP
    
    # 日志配置
    access_log /var/log/nginx/3d-model-access.log;
    error_log /var/log/nginx/3d-model-error.log;
    
    # ========================================
    # 文件上传和超时配置
    # ========================================
    
    # 增加文件上传大小限制（支持大型3D模型）
    client_max_body_size 500M;
    
    # 增加超时时间（大文件上传/下载需要更长时间）
    client_body_timeout 600s;
    client_header_timeout 600s;
    send_timeout 600s;
    
    # 增加缓冲区大小
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 16k;
    
    # ========================================
    # 静态文件服务 - 模型文件目录
    # 关键配置：支持 Range 请求（渐进式加载必需）
    # ========================================
    
    location /models/ {
        # 修改为你的实际路径
        alias /path/to/3dModeldisplay/public/models/;
        
        # ✅ 启用 Range 请求支持（渐进式加载的核心）
        add_header Accept-Ranges bytes always;
        
        # ✅ CORS 跨域配置（允许浏览器访问）
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Range, Content-Type, Accept, Origin" always;
        add_header Access-Control-Expose-Headers "Accept-Ranges, Content-Length, Content-Range, Content-Type" always;
        
        # 处理 OPTIONS 预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Range, Content-Type, Accept, Origin" always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # ✅ 设置正确的 MIME 类型
        types {
            application/octet-stream    ply;     # PLY 点云格式
            model/obj                   obj;     # OBJ 模型格式
            application/octet-stream    stl;     # STL 模型格式
            model/gltf-binary          glb;     # GLB 格式（预留）
            model/gltf+json            gltf;    # GLTF 格式（预留）
        }
        default_type application/octet-stream;
        
        # ✅ 禁用 gzip（二进制文件压缩效果差，反而影响性能）
        gzip off;
        
        # ✅ 启用缓存（减少重复下载）
        expires 30d;
        add_header Cache-Control "public, immutable" always;
        
        # ✅ 启用 sendfile 和 tcp_nopush（提高大文件传输性能）
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        
        # ✅ 允许访问
        autoindex off;
    }
    
    # ========================================
    # 静态文件服务 - 缩略图目录
    # ========================================
    
    location /images/ {
        # 修改为你的实际路径
        alias /path/to/3dModeldisplay/public/images/;
        
        # CORS 配置
        add_header Access-Control-Allow-Origin * always;
        
        # 图片缓存
        expires 30d;
        add_header Cache-Control "public" always;
        
        # 图片格式 MIME 类型
        types {
            image/jpeg      jpg jpeg;
            image/png       png;
            image/gif       gif;
            image/webp      webp;
            image/svg+xml   svg;
        }
        
        gzip on;
        gzip_types image/svg+xml;
    }
    
    # ========================================
    # 静态文件服务 - CSS/JS 等前端资源
    # ========================================
    
    location /css/ {
        alias /path/to/3dModeldisplay/public/css/;
        expires 7d;
        add_header Cache-Control "public" always;
        gzip on;
    }
    
    location /js/ {
        alias /path/to/3dModeldisplay/public/js/;
        expires 7d;
        add_header Cache-Control "public" always;
        gzip on;
        gzip_types application/javascript text/javascript;
    }
    
    # ========================================
    # 反向代理到 Node.js 应用
    # 处理 API 请求和动态内容
    # ========================================
    
    location / {
        # 代理到本地 Node.js 服务器
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        
        # 标准代理头
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # ✅ 关键！传递 Range 请求头（如果需要通过 Node.js 代理文件）
        proxy_set_header Range $http_range;
        proxy_set_header If-Range $http_if_range;
        
        # ✅ 禁用代理缓冲（对大文件和 Range 请求很重要）
        proxy_buffering off;
        proxy_request_buffering off;
        
        # ✅ 禁用缓存 Range 请求
        proxy_no_cache $http_range $http_if_range;
        proxy_cache_bypass $http_upgrade;
        
        # 增加超时时间
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # ========================================
    # 管理后台
    # ========================================
    
    location /admin/ {
        proxy_pass http://localhost:3000/admin/;
        proxy_http_version 1.1;
        
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # 增加超时（上传文件需要）
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
    
    # API 路由
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # 上传大文件需要更长的超时时间
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        
        # 禁用缓冲（上传大文件）
        proxy_request_buffering off;
    }
}

# ========================================
# HTTPS 配置（可选但推荐）
# 使用 Let's Encrypt 免费证书
# ========================================

# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     # SSL 证书路径（使用 certbot 自动生成）
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     
#     # SSL 优化配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # 其余配置与 HTTP 相同...
# }

# # HTTP 自动跳转到 HTTPS
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }

